/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ms.internet.message.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.ms.internet.message.model.MSMessage;
import com.ms.internet.message.service.MSMReceiverLocalService;
import com.ms.internet.message.service.MSMSenderLocalService;
import com.ms.internet.message.service.MSMessageLocalService;
import com.ms.internet.message.service.persistence.MSMReceiverPersistence;
import com.ms.internet.message.service.persistence.MSMSenderPersistence;
import com.ms.internet.message.service.persistence.MSMessagePersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the m s message local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ms.internet.message.service.impl.MSMessageLocalServiceImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. Always use {@link com.ms.internet.message.service.MSMessageLocalServiceUtil} to access the m s message local service.
 * </p>
 *
 * @author I Am Dung
 * @see com.ms.internet.message.service.impl.MSMessageLocalServiceImpl
 * @see com.ms.internet.message.service.MSMessageLocalServiceUtil
 * @generated
 */
public abstract class MSMessageLocalServiceBaseImpl
	implements MSMessageLocalService {
	/**
	 * Adds the m s message to the database. Also notifies the appropriate model listeners.
	 *
	 * @param msMessage the m s message to add
	 * @return the m s message that was added
	 * @throws SystemException if a system exception occurred
	 */
	public MSMessage addMSMessage(MSMessage msMessage)
		throws SystemException {
		msMessage.setNew(true);

		return msMessagePersistence.update(msMessage, false);
	}

	/**
	 * Creates a new m s message with the primary key. Does not add the m s message to the database.
	 *
	 * @param messageId the primary key for the new m s message
	 * @return the new m s message
	 */
	public MSMessage createMSMessage(long messageId) {
		return msMessagePersistence.create(messageId);
	}

	/**
	 * Deletes the m s message with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param messageId the primary key of the m s message to delete
	 * @throws PortalException if a m s message with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteMSMessage(long messageId)
		throws PortalException, SystemException {
		msMessagePersistence.remove(messageId);
	}

	/**
	 * Deletes the m s message from the database. Also notifies the appropriate model listeners.
	 *
	 * @param msMessage the m s message to delete
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteMSMessage(MSMessage msMessage) throws SystemException {
		msMessagePersistence.remove(msMessage);
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return msMessagePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return msMessagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @param orderByComparator the comparator to order the results by
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return msMessagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Counts the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return msMessagePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Gets the m s message with the primary key.
	 *
	 * @param messageId the primary key of the m s message to get
	 * @return the m s message
	 * @throws PortalException if a m s message with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public MSMessage getMSMessage(long messageId)
		throws PortalException, SystemException {
		return msMessagePersistence.findByPrimaryKey(messageId);
	}

	/**
	 * Gets a range of all the m s messages.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of m s messages to return
	 * @param end the upper bound of the range of m s messages to return (not inclusive)
	 * @return the range of m s messages
	 * @throws SystemException if a system exception occurred
	 */
	public List<MSMessage> getMSMessages(int start, int end)
		throws SystemException {
		return msMessagePersistence.findAll(start, end);
	}

	/**
	 * Gets the number of m s messages.
	 *
	 * @return the number of m s messages
	 * @throws SystemException if a system exception occurred
	 */
	public int getMSMessagesCount() throws SystemException {
		return msMessagePersistence.countAll();
	}

	/**
	 * Updates the m s message in the database. Also notifies the appropriate model listeners.
	 *
	 * @param msMessage the m s message to update
	 * @return the m s message that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public MSMessage updateMSMessage(MSMessage msMessage)
		throws SystemException {
		msMessage.setNew(false);

		return msMessagePersistence.update(msMessage, true);
	}

	/**
	 * Updates the m s message in the database. Also notifies the appropriate model listeners.
	 *
	 * @param msMessage the m s message to update
	 * @param merge whether to merge the m s message with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the m s message that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public MSMessage updateMSMessage(MSMessage msMessage, boolean merge)
		throws SystemException {
		msMessage.setNew(false);

		return msMessagePersistence.update(msMessage, merge);
	}

	/**
	 * Gets the m s message local service.
	 *
	 * @return the m s message local service
	 */
	public MSMessageLocalService getMSMessageLocalService() {
		return msMessageLocalService;
	}

	/**
	 * Sets the m s message local service.
	 *
	 * @param msMessageLocalService the m s message local service
	 */
	public void setMSMessageLocalService(
		MSMessageLocalService msMessageLocalService) {
		this.msMessageLocalService = msMessageLocalService;
	}

	/**
	 * Gets the m s message persistence.
	 *
	 * @return the m s message persistence
	 */
	public MSMessagePersistence getMSMessagePersistence() {
		return msMessagePersistence;
	}

	/**
	 * Sets the m s message persistence.
	 *
	 * @param msMessagePersistence the m s message persistence
	 */
	public void setMSMessagePersistence(
		MSMessagePersistence msMessagePersistence) {
		this.msMessagePersistence = msMessagePersistence;
	}

	/**
	 * Gets the m s m sender local service.
	 *
	 * @return the m s m sender local service
	 */
	public MSMSenderLocalService getMSMSenderLocalService() {
		return msmSenderLocalService;
	}

	/**
	 * Sets the m s m sender local service.
	 *
	 * @param msmSenderLocalService the m s m sender local service
	 */
	public void setMSMSenderLocalService(
		MSMSenderLocalService msmSenderLocalService) {
		this.msmSenderLocalService = msmSenderLocalService;
	}

	/**
	 * Gets the m s m sender persistence.
	 *
	 * @return the m s m sender persistence
	 */
	public MSMSenderPersistence getMSMSenderPersistence() {
		return msmSenderPersistence;
	}

	/**
	 * Sets the m s m sender persistence.
	 *
	 * @param msmSenderPersistence the m s m sender persistence
	 */
	public void setMSMSenderPersistence(
		MSMSenderPersistence msmSenderPersistence) {
		this.msmSenderPersistence = msmSenderPersistence;
	}

	/**
	 * Gets the m s m receiver local service.
	 *
	 * @return the m s m receiver local service
	 */
	public MSMReceiverLocalService getMSMReceiverLocalService() {
		return msmReceiverLocalService;
	}

	/**
	 * Sets the m s m receiver local service.
	 *
	 * @param msmReceiverLocalService the m s m receiver local service
	 */
	public void setMSMReceiverLocalService(
		MSMReceiverLocalService msmReceiverLocalService) {
		this.msmReceiverLocalService = msmReceiverLocalService;
	}

	/**
	 * Gets the m s m receiver persistence.
	 *
	 * @return the m s m receiver persistence
	 */
	public MSMReceiverPersistence getMSMReceiverPersistence() {
		return msmReceiverPersistence;
	}

	/**
	 * Sets the m s m receiver persistence.
	 *
	 * @param msmReceiverPersistence the m s m receiver persistence
	 */
	public void setMSMReceiverPersistence(
		MSMReceiverPersistence msmReceiverPersistence) {
		this.msmReceiverPersistence = msmReceiverPersistence;
	}

	/**
	 * Gets the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Gets the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Gets the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Gets the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Gets the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Gets the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Gets the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query to perform
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = msMessagePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = MSMessageLocalService.class)
	protected MSMessageLocalService msMessageLocalService;
	@BeanReference(type = MSMessagePersistence.class)
	protected MSMessagePersistence msMessagePersistence;
	@BeanReference(type = MSMSenderLocalService.class)
	protected MSMSenderLocalService msmSenderLocalService;
	@BeanReference(type = MSMSenderPersistence.class)
	protected MSMSenderPersistence msmSenderPersistence;
	@BeanReference(type = MSMReceiverLocalService.class)
	protected MSMReceiverLocalService msmReceiverLocalService;
	@BeanReference(type = MSMReceiverPersistence.class)
	protected MSMReceiverPersistence msmReceiverPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
}