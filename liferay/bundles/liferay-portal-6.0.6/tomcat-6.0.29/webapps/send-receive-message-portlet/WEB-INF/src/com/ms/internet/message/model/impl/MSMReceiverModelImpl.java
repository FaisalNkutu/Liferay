/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ms.internet.message.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.ms.internet.message.model.MSMReceiver;
import com.ms.internet.message.model.MSMReceiverModel;
import com.ms.internet.message.service.persistence.MSMReceiverPK;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the MSMReceiver service. Represents a row in the &quot;MS_MSMReceiver&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ms.internet.message.model.MSMReceiverModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MSMReceiverImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a m s m receiver model instance should use the {@link com.ms.internet.message.model.MSMReceiver} interface instead.
 * </p>
 *
 * @author I Am Dung
 * @see MSMReceiverImpl
 * @see com.ms.internet.message.model.MSMReceiver
 * @see com.ms.internet.message.model.MSMReceiverModel
 * @generated
 */
public class MSMReceiverModelImpl extends BaseModelImpl<MSMReceiver>
	implements MSMReceiverModel {
	public static final String TABLE_NAME = "MS_MSMReceiver";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", new Integer(Types.BIGINT) },
			{ "messageId", new Integer(Types.BIGINT) },
			{ "dateRecieved", new Integer(Types.TIMESTAMP) },
			{ "msStatus", new Integer(Types.BOOLEAN) }
		};
	public static final String TABLE_SQL_CREATE = "create table MS_MSMReceiver (userId LONG not null,messageId LONG not null,dateRecieved DATE null,msStatus BOOLEAN,primary key (userId, messageId))";
	public static final String TABLE_SQL_DROP = "drop table MS_MSMReceiver";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ms.internet.message.model.MSMReceiver"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ms.internet.message.model.MSMReceiver"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ms.internet.message.model.MSMReceiver"));

	public MSMReceiverModelImpl() {
	}

	public MSMReceiverPK getPrimaryKey() {
		return new MSMReceiverPK(_userId, _messageId);
	}

	public void setPrimaryKey(MSMReceiverPK pk) {
		setUserId(pk.userId);
		setMessageId(pk.messageId);
	}

	public Serializable getPrimaryKeyObj() {
		return new MSMReceiverPK(_userId, _messageId);
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getMessageId() {
		return _messageId;
	}

	public void setMessageId(long messageId) {
		_messageId = messageId;
	}

	public Date getDateRecieved() {
		return _dateRecieved;
	}

	public void setDateRecieved(Date dateRecieved) {
		_dateRecieved = dateRecieved;
	}

	public boolean getMsStatus() {
		return _msStatus;
	}

	public boolean isMsStatus() {
		return _msStatus;
	}

	public void setMsStatus(boolean msStatus) {
		_msStatus = msStatus;
	}

	public MSMReceiver toEscapedModel() {
		if (isEscapedModel()) {
			return (MSMReceiver)this;
		}
		else {
			return (MSMReceiver)Proxy.newProxyInstance(MSMReceiver.class.getClassLoader(),
				new Class[] { MSMReceiver.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public Object clone() {
		MSMReceiverImpl msmReceiverImpl = new MSMReceiverImpl();

		msmReceiverImpl.setUserId(getUserId());

		msmReceiverImpl.setMessageId(getMessageId());

		msmReceiverImpl.setDateRecieved(getDateRecieved());

		msmReceiverImpl.setMsStatus(getMsStatus());

		return msmReceiverImpl;
	}

	public int compareTo(MSMReceiver msmReceiver) {
		MSMReceiverPK pk = msmReceiver.getPrimaryKey();

		return getPrimaryKey().compareTo(pk);
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		MSMReceiver msmReceiver = null;

		try {
			msmReceiver = (MSMReceiver)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		MSMReceiverPK pk = msmReceiver.getPrimaryKey();

		if (getPrimaryKey().equals(pk)) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", messageId=");
		sb.append(getMessageId());
		sb.append(", dateRecieved=");
		sb.append(getDateRecieved());
		sb.append(", msStatus=");
		sb.append(getMsStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.ms.internet.message.model.MSMReceiver");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateRecieved</column-name><column-value><![CDATA[");
		sb.append(getDateRecieved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>msStatus</column-name><column-value><![CDATA[");
		sb.append(getMsStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _userId;
	private String _userUuid;
	private long _messageId;
	private Date _dateRecieved;
	private boolean _msStatus;
}